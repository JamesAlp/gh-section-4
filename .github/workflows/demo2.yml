name: Deploy
on:
  workflow_dispatch:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm # path to npm cache
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} # used to retrieve cache in the future, the hashFiles function generates a unique name and changes whenever the file contents changes, we'll use the package-lock.json file because whenever it changes due to a dependency change this is a good file to pick up on that change. When the hash key updates then the previous cache will be discarded and a new one created. Will look at the folder after the job finishes and update the cache at that point
      - name: Install dependencies
        run: npm ci # automatically uses the ~./.npm file, if it exists it will be used, if it doesn't exist it will be redownloaded
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs: # define simple outputs that can be defined here and used in other jobs later
      script-file: ${{ steps.publish.outputs.script-file }} # uses the "steps" context to access the step where the below file is output via the step id
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm # path to npm cache
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} # used to retrieve cache in the future, the hashFiles function generates a unique name and changes whenever the file contents changes, we'll use the package-lock.json file because whenever it changes due to a dependency change this is a good file to pick up on that change. When the hash key updates then the previous cache will be discarded and a new one created. Will look at the folder after the job finishes and update the cache at that point
      - name: Install dependencies
        run: npm ci # automatically uses the ~./.npm file, if it exists it will be used, if it doesn't exist it will be redownloaded
      - name: Build
        run: npm run build
      - name: Publish JS filename
        id: publish # step id
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';' # takes the output key/value pair and write it to the $GITHUB_OUTPUT file (managed by GitHub)
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
          # path: |
          #   dist
          #   package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}" # uses the "needs" context
      - name: Deploy
        run: echo "Deploying..."